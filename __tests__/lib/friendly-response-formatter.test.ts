/**
 * Unit Tests for Friendly Response Formatter
 * Tests mapping, schema validation, and tone toggles
 */

import { FriendlyResponseFormatter, ToneConfig, FriendlyResponse } from '@/lib/friendly-response-formatter';

describe('FriendlyResponseFormatter', () => {
  let formatter: FriendlyResponseFormatter;

  beforeEach(() => {
    formatter = new FriendlyResponseFormatter();
  });

  describe('Response Formatting', () => {
    it('should format JSON response with output field', () => {
      const jsonResponse = JSON.stringify({
        output: "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –≤–∞–∂–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º."
      });

      const result = formatter.formatResponse(jsonResponse);

      expect(result).toBeDefined();
      expect(result.greeting).toBeDefined();
      expect(result.mainContent).toBeDefined();
      expect(result.encouragement).toBeDefined();
      expect(result.emoji).toBeDefined();
      expect(Array.isArray(result.actionItems)).toBe(true);
    });

    it('should format plain text response', () => {
      const textResponse = "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ. 1. –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞. 2. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏.";

      const result = formatter.formatResponse(textResponse);

      expect(result).toBeDefined();
      expect(result.greeting).toBeDefined();
      expect(result.mainContent).toContain('–º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
      expect(result.actionItems.length).toBeGreaterThanOrEqual(0); // May or may not extract tips from single line
      expect(result.encouragement).toBeDefined();
    });

    it('should extract numbered tips correctly', () => {
      const response = `–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å–æ–≤–µ—Ç—ã:
      1. *–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π* ‚Äî –µ—à—å—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ
      2. *–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –±–µ–ª–æ–∫* ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ 1,6‚Äì2 –≥
      3. *–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É–≥–ª–µ–≤–æ–¥—ã* ‚Äî –æ–Ω–∏ –¥–∞–¥—É—Ç —ç–Ω–µ—Ä–≥–∏—é`;

      const result = formatter.formatResponse(response);

      expect(result.actionItems).toHaveLength(3);
      expect(result.actionItems[0]).toContain('–ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π');
      expect(result.actionItems[1]).toContain('–±–µ–ª–æ–∫');
      expect(result.actionItems[2]).toContain('—É–≥–ª–µ–≤–æ–¥—ã');
    });

    it('should detect muscle building topic and use appropriate emoji', () => {
      const response = "–î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ";

      const result = formatter.formatResponse(response);

      expect(result.emoji).toBe('üí™');
    });

    it('should detect energy topic and use appropriate emoji', () => {
      const response = "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–µ–µ";

      const result = formatter.formatResponse(response);

      expect(result.emoji).toBe('‚ö°');
    });

    it('should extract questions for next steps', () => {
      const response = `–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å–æ–≤–µ—Ç—ã.
      
      –ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ:
      - –í–∞—à –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª
      - –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω`;

      const result = formatter.formatResponse(response);

      expect(result.nextSteps).toBeDefined();
      expect(result.nextSteps).toContain('—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å');
    });
  });

  describe('Tone Configuration', () => {
    it('should use friendly tone by default', () => {
      const defaultTone = formatter.getCurrentTone();

      expect(defaultTone.warmth).toBe('friendly');
      expect(defaultTone.useEmojis).toBe(true);
      expect(defaultTone.humorLevel).toBe('light');
    });

    it('should generate professional greeting', () => {
      const professionalConfig: ToneConfig = {
        warmth: 'professional',
        useEmojis: false,
        humorLevel: 'none'
      };

      formatter.updateTone(professionalConfig);
      const result = formatter.formatResponse("Test response");

      expect(result.greeting).toContain('Excellent question');
      expect(result.greeting).not.toContain('üòä');
    });

    it('should generate playful greeting with emojis', () => {
      const playfulConfig: ToneConfig = {
        warmth: 'playful',
        useEmojis: true,
        humorLevel: 'moderate'
      };

      formatter.updateTone(playfulConfig);
      const result = formatter.formatResponse("Test response");

      expect(result.greeting).toContain('üåü');
      expect(result.greeting).toContain('Amazing');
    });

    it('should respect emoji configuration', () => {
      const noEmojiConfig: ToneConfig = {
        warmth: 'friendly',
        useEmojis: false,
        humorLevel: 'light'
      };

      formatter.updateTone(noEmojiConfig);
      const result = formatter.formatResponse("Test response with –±–µ–ª–æ–∫ and –∫–∞–ª–æ—Ä–∏–∏");

      // Should not contain emojis in action items
      const hasEmojis = result.actionItems.some(item => /[ü•©üî•üçûü•ë‚ö°‚ú®]/u.test(item));
      expect(hasEmojis).toBe(false);
    });

    it('should add contextual emojis when enabled', () => {
      const emojiConfig: ToneConfig = {
        warmth: 'friendly',
        useEmojis: true,
        humorLevel: 'light'
      };

      formatter.updateTone(emojiConfig);
      const response = `–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é:
      1. –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –¥–ª—è –º—ã—à—Ü
      2. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
      3. –î–æ–±–∞–≤—å—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏`;
      const result = formatter.formatResponse(response);

      // Should contain some emojis (may be contextual or default ‚ú®)
      expect(result.actionItems.length).toBeGreaterThan(0);
      expect(result.actionItems.some(item => /[üí™üî•‚ö°‚ú®]/.test(item))).toBe(true);
    });

    it('should update tone configuration correctly', () => {
      const newTone: Partial<ToneConfig> = {
        warmth: 'professional',
        humorLevel: 'none'
      };

      formatter.updateTone(newTone);
      const currentTone = formatter.getCurrentTone();

      expect(currentTone.warmth).toBe('professional');
      expect(currentTone.humorLevel).toBe('none');
      expect(currentTone.useEmojis).toBe(true); // Should keep original value
    });
  });

  describe('Content Enhancement', () => {
    it('should enhance nutrition terms with formatting', () => {
      const response = "–í–∞–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–µ–ª–æ–∫ –∏ –∫–∞–ª–æ—Ä–∏–∏";

      const result = formatter.formatResponse(response);

      expect(result.mainContent).toContain('ü•© –±–µ–ª–æ–∫');
      expect(result.mainContent).toContain('üî• –∫–∞–ª–æ—Ä–∏–∏');
    });

    it('should format action items with proper numbering and icons', () => {
      const response = `–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é:
      1. –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü
      2. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏  
      3. –î–æ–±–∞–≤—å—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤ —Ä–∞—Ü–∏–æ–Ω`;

      const result = formatter.formatResponse(response);

      expect(result.actionItems).toHaveLength(3);
      // Should have emojis (either contextual or default ‚ú®)
      expect(result.actionItems.every(item => /[üí™üî•‚ö°‚ú®]/.test(item))).toBe(true);
    });

    it('should generate different encouragement messages', () => {
      const responses = [];
      
      // Generate multiple responses to test randomization
      for (let i = 0; i < 10; i++) {
        const result = formatter.formatResponse("Test response");
        responses.push(result.encouragement);
      }

      // Should have variety in encouragement messages
      const uniqueResponses = new Set(responses);
      expect(uniqueResponses.size).toBeGreaterThan(1);
    });

    it('should clean up and format text properly', () => {
      const messyResponse = `–°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é:
      1. *–ï—à—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–∞* ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ
      2. *–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏* ‚Äî –µ—à—å—Ç–µ –≤ –º–µ—Ä—É`;

      const result = formatter.formatResponse(messyResponse);

      expect(result.actionItems).toHaveLength(2);
      // Should contain bold formatting and clean text
      expect(result.actionItems[0]).toMatch(/–±–µ–ª–∫–∞/);
      expect(result.actionItems[1]).toMatch(/–∫–∞–ª–æ—Ä–∏–∏/);
    });
  });

  describe('Schema Validation', () => {
    it('should always return valid FriendlyResponse structure', () => {
      const response = formatter.formatResponse("Any input");

      // Check all required fields are present
      expect(typeof response.greeting).toBe('string');
      expect(typeof response.mainContent).toBe('string');
      expect(Array.isArray(response.actionItems)).toBe(true);
      expect(typeof response.encouragement).toBe('string');
      expect(typeof response.emoji).toBe('string');
      
      // Optional field
      if (response.nextSteps) {
        expect(typeof response.nextSteps).toBe('string');
      }
    });

    it('should handle empty input gracefully', () => {
      const result = formatter.formatResponse("");

      expect(result).toBeDefined();
      expect(result.greeting).toBeDefined();
      expect(result.encouragement).toBeDefined();
      expect(result.emoji).toBeDefined();
    });

    it('should handle malformed JSON gracefully', () => {
      const malformedJson = '{"output": "test", "invalid": }';

      const result = formatter.formatResponse(malformedJson);

      expect(result).toBeDefined();
      expect(result.greeting).toBeDefined();
      expect(result.encouragement).toBeDefined();
    });

    it('should handle very long responses', () => {
      const longResponse = "–û—Ç–ª–∏—á–Ω–æ! " + "–û—á–µ–Ω—å –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. ".repeat(10) + 
        "\n1. –ü–µ—Ä–≤—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n2. –í—Ç–æ—Ä–æ–π —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é\n3. –¢—Ä–µ—Ç–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º";

      const result = formatter.formatResponse(longResponse);

      expect(result).toBeDefined();
      expect(result.actionItems.length).toBeGreaterThanOrEqual(0); // May extract tips or not
      expect(result.mainContent.length).toBeGreaterThan(0);
    });
  });

  describe('Internationalization Support', () => {
    it('should handle Russian text correctly', () => {
      const russianResponse = `–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –≤–∞–∂–Ω–æ:
      1. –ë–µ–ª–æ–∫ ‚Äî 1,6‚Äì2 –≥ –Ω–∞ –∫–≥ –º–∞—Å—Å—ã —Ç–µ–ª–∞
      2. –ö–∞–ª–æ—Ä–∏–∏ ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ü–∏—Ç
      3. –£–≥–ª–µ–≤–æ–¥—ã ‚Äî —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`;

      const result = formatter.formatResponse(russianResponse);

      expect(result.mainContent).toContain('–º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
      expect(result.actionItems).toHaveLength(3);
      expect(result.actionItems[0]).toContain('–ë–µ–ª–æ–∫');
    });

    it('should handle mixed language content', () => {
      const mixedResponse = `Great advice! –û—Ç–ª–∏—á–Ω–æ!
      1. Protein ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –º—ã—à—Ü
      2. Calories ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ intake`;

      const result = formatter.formatResponse(mixedResponse);

      expect(result).toBeDefined();
      expect(result.actionItems).toHaveLength(2);
    });
  });

  describe('Performance and Edge Cases', () => {
    it('should process responses quickly', () => {
      const startTime = Date.now();
      formatter.formatResponse("Test response with some content");
      const endTime = Date.now();

      expect(endTime - startTime).toBeLessThan(100); // Should be very fast
    });

    it('should handle responses without numbered items', () => {
      const response = "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.";

      const result = formatter.formatResponse(response);

      expect(result.actionItems).toHaveLength(0);
      // Text may have emoji enhancements, check for key concepts
      expect(result.mainContent).toMatch(/–ø–∏—Ç–∞–Ω–∏–µ|–∑–¥–æ—Ä–æ–≤—å—è/);
    });

    it('should handle responses with only questions', () => {
      const response = "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ? –ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å?";

      const result = formatter.formatResponse(response);

      expect(result.nextSteps).toBeDefined();
      expect(result.nextSteps).toContain('—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å');
    });
  });
});

// Integration tests for tone presets
describe('Tone Preset Integration', () => {
  const testResponse = `–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤–∞–∂–Ω–æ:
  1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
  2. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö?`;

  it('should produce different outputs for different tones', () => {
    const professionalFormatter = new FriendlyResponseFormatter({
      warmth: 'professional',
      useEmojis: false,
      humorLevel: 'none'
    });

    const playfulFormatter = new FriendlyResponseFormatter({
      warmth: 'playful',
      useEmojis: true,
      humorLevel: 'moderate'
    });

    const professionalResult = professionalFormatter.formatResponse(testResponse);
    const playfulResult = playfulFormatter.formatResponse(testResponse);

    // Should have different greetings
    expect(professionalResult.greeting).not.toBe(playfulResult.greeting);
    
    // Professional should not have emojis in greeting
    expect(professionalResult.greeting).not.toMatch(/[üåüüòäüöÄ]/);
    
    // Playful should have emojis
    expect(playfulResult.greeting).toMatch(/[üåüüòäüöÄ]/);
  });

  it('should maintain consistency within the same tone', () => {
    const formatter = new FriendlyResponseFormatter({
      warmth: 'friendly',
      useEmojis: true,
      humorLevel: 'light'
    });

    const result1 = formatter.formatResponse(testResponse);
    const result2 = formatter.formatResponse(testResponse);

    // Should have similar structure (same tone, same emoji usage)
    expect(result1.greeting.includes('üòä')).toBe(result2.greeting.includes('üòä'));
  });
});
